#-*- coding: utf-8 -*-

#--- pip install Django --upgrade

"""
Django settings for mysiteProject project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
# C:\Users\Steven\GitRepository\stevenlabs-common-develop\01_DjangoExampleWebApp\ExamBlogWebSite
BASE_DIR = Path(__file__).resolve().parent.parent
#BASE_DIR = 'C:/Users/Steven/GitRepository/stevenlabs-common-develop/01_DjangoExampleWebApp/ExamBlogWebSite'
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
WWW_DIR = 'www_dir'
SQLite_DIR = 'database/SQLite'
#SECRET_FILE = 'secret_key.txt'
SECRET_FILE = 'secret_key.pfx'


# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-m4=ex3^shsjd3ls318$vqg$&7_8!sc*)d#$f36jq0%zjlwe1ki'    # 하드코딩
#SECRET_KEY = os.environ['PYTHON_SECRET_KEY']    # 시스템 환경변수에 설정된값 불러오기
with open(os.path.join(BASE_DIR, WWW_DIR, SECRET_FILE)) as f:    # 별도의 파일에서 읽어오기
    SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#ALLOWED_HOSTS = ['192.168.0.104', '192.168.0.105', 'localhost', '127.0.0.1']    # WAS와 WSGI 간 주고받을 신뢰할 수 있는 WEB서버 주소 (클라이언트 주소 아님)
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
#ALLOWED_HOST = ['*']


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

#---------------------------------------------------
# 운영모드 시 필수 설정 LIST
# SECRET_KEY = 외부파일로 보관 및 50자이상 문자, Access Full 경로
# DEBUG = False
# ALLOWED_HOSTS = ['서버 IP' or '도메인네임']
# STATIC_ROOT = static 파일들이 들어있는 root 디렉토리 Access Full 경로 (정적파일 : CSS, JavaScript, Images, media...)
# DATABASES = { 파일 Base DB일 경우, Access Full 경로 & 권한(ex.리눅스) } : 장고 admin은 파일 Base DB 임 (SQLite)
# LOGGING = { 파일 Logging일 경우, Access Full 경로 & 권한(ex.리눅스) }
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# (옵션) [HTTPS/SSL 서비스 사용] SECURE_SSL_REDIRECT = True    # SSL 및 비 SSL 연결 모두를 통해 사이트를 사용할 수 있어야 하는 경우가 아니면 이 설정을 True로 설정하거나 모든 연결을 HTTPS로 리디렉션 하도록 로드 밸런서 또는 역방향 프록시 서버를 구성할 수 있습니다. 
# (옵션) [HTTPS/SSL 서비스 사용] SECURE_HSTS_SECONDS = ?       # 전체 사이트가 SSL을 통해서만 제공되는 경우 값을 설정하고 HTTP Strict Transport Security를 활성화하는 것을 고려할 수 있습니다. 먼저 설명서를 읽으십시오. 부주의하게 HSTS를 활성화하면 심각하고 돌이킬 수 없는 문제가 발생할 수 있습니다.
#---------------------------------------------------

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
tns_dsn = '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=127.0.0.1)(PORT=1521))(CONNECT_DATA=(SID=EES)))'
ora_id = 'EESAPP'
ora_pwd = 'EESAPP'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, SQLite_DIR, 'db.sqlite3'),
    },
    'oracle': {    # pip install cx_Oracle
        'ENGINE': 'django.db.backends.oracle',
        'NAME': (tns_dsn),
        'USER': ora_id,
        'PASSWORD': ora_pwd,
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/static/' # 변경 : 'static/' -> '/static/' ('/' 경로지정 확인필수)
STATIC_ROOT = os.path.join(BASE_DIR, WWW_DIR, 'static/')    # 추가 : ('/' 경로지정 확인필수)
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'staticFiles')]    # 추가 : ('/' 경로지정 확인필수) (STATICFILES_DIRS 에 있는 정적파일 전체를 STATIC_ROOT 로 Copy해줌. 수동실행 : python manage.py collectstatic)

# 보안 전용 세션 쿠키를 사용하면 네트워크 트래픽 스니퍼가 사용자 세션을 가로채기가 더 어려워집니다
#SESSION_COOKIE_SECURE = True    # 추가

# 보안 전용 CSRF 쿠키를 사용하면 네트워크 트래픽 스니퍼가 CSRF 토큰을 훔치는 것을 더 어렵게 만듭니다
#CSRF_COOKIE_SECURE = True    # 추가

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#---------------------------------------------------

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #---------------------------------------------------
    'taggit.apps.TaggitAppConfig',    # pip install django-taggit
    'taggit_templatetags2',    # pip install django-taggit-templatetags2
    'widget_tweaks',    # pip install django-widget-tweaks
    #---------------------------------------------------
    'polls.apps.PollsConfig',
    'books.apps.BooksConfig',
    'bookmark.apps.BookmarkConfig',
    'blog.apps.BlogConfig',
    'photo.apps.PhotoConfig',
    'insta.apps.InstaConfig',
    'eqpInfo.apps.EqpInfoConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysiteProject.urls'

# 템플릿 찾는 순서 : TEMPLATES 의 'DIRS' 목록의 위에서 아래 순서대로 -> INSTALLED_APPS 의 목록의 위에서 아래 순서대로
# 1. os.path.join(BASE_DIR, 'templates')
# 2. 장고 디렉토리 ('django.contrib.admin' ...)
# 3. 개발자 App 디렉토리 ('polls.apps.PollsConfig' : 01_DjangoExampleWebApp￦ExamBlogWebSite￦polls￦templates￦polls￦index.html)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],    # 변경
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
TEMPLATE_DIRS = [os.path.join(BASE_DIR, 'templates')]    # 오버라이딩 (위에 설정값 덮어쓰기됨) ('/' 경로지정 확인필수)


WSGI_APPLICATION = 'mysiteProject.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'    # 변경 : en-us -> ko-kr (주의 : kr로 변경시, 날짜 Format 형식 바뀜 => ex. {{ today|date:'Y-m-d' }})

TIME_ZONE = 'Asia/Seoul'    # 변경 : UTC -> Asia/Seoul

USE_I18N = True

#USE_L10N = True    # 장고 4.x 에서 삭제됨(?)

USE_TZ = False    # 변경 : True -> False


# (로그추가)
#LOGGING_CONFIG = None
LOGGING_CONFIG = 'logging.config.dictConfig'    # 생략 가능
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s.%(msecs)03d] [%(levelname)s] [%(name)s:%(lineno)s]    ##### %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S",
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'mysiteFramework.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
        'mysiteProject': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'polls': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'books': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'bookmark': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'blog': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'photo': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'insta': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'eqpInfo': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
# import logging.config
# logging.config.dictConfig(LOGGING)

# ----------
# 미디어 파일 관련
# ----------
# URL that handles the media served from MEDIA_ROOT.
# Examples: "http://example.com/media/", "http://media.example.com/"
MEDIA_URL = '/media/'    # 추가 : ('/' 경로지정 확인필수)

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "var/www/example.com/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, WWW_DIR, 'media')    # 추가 : ('/' 경로지정 확인필수)

# ----------
# TAG 관련
# ----------
TAGGIT_CASE_INSENSITIVE = True    # 추가 : 태그 검색 시, 대소문자 구분여부 (True:구분안함) (Default:False)
TAGGIT_LIMIT = 50    # 추가 : 태그 표시 최대 개수

# ----------
# 댓글 관련
# ----------
DISQUS_SHORTNAME_APP_IS_BLOG = 'wsson-web-site'
DISQUS_MY_DOMAIN_APP_IS_BLOG = 'http://127.0.0.1:8000'    # 운영환경에서는 포트 변경

# ----------
# 로그인 관련
# ----------
# LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'    # Default : '/accounts/profile/'
# LOGOUT_REDIRECT_URL = None
